const fs=require("fs"),path=require("path");class UXEnhancer{constructor(){this.htmlDir="."}async enhanceUX(){const n=this.findFiles(this.htmlDir,[".html"]);for(const i of n)try{let n=fs.readFileSync(i,"utf8");n=this.addLoadingSpinner(n),n=this.addNotificationSystem(n),n=this.addFormLoadingStates(n),fs.writeFileSync(i,n)}catch(n){}}addLoadingSpinner(n){return n.replace(/<body>/,'<body>\n    <div id="loading-spinner" class="loading-spinner" style="display: none;">\n      <div class="spinner"></div>\n    </div>')}addNotificationSystem(n){return n.replace(/<body>/,'<body>\n    <div id="notification-container" class="notification-container">\n      <div id="notification" class="notification" style="display: none;">\n        <span class="notification-message"></span>\n        <button class="notification-close">&times;</button>\n      </div>\n    </div>')}addFormLoadingStates(n){return n.replace(/<form([^>]*)>/g,((n,i)=>i.includes("class=")?n.replace(/class="([^"]*)"/,'class="$1 form-with-loading"'):`<form${i} class="form-with-loading">`))}findFiles(n,i){let s=[];const t=fs.readdirSync(n);for(const a of t){const t=path.join(n,a);fs.statSync(t).isDirectory()?s=s.concat(this.findFiles(t,i)):i.some((n=>a.endsWith(n)))&&s.push(t)}return s}}const enhancer=new UXEnhancer;enhancer.enhanceUX();export{UXEnhancer,class,if};